# 카프카 미러메이커 사용시 설정파일
# 미러메이커 = 서로 다른 두 개의 카프카 클러스터 간에 토픽을 복제하는 애플리케이션
# 미러메이커 미사용하고 프로듀서와 컨슈머를 사용해서 직접 미러링 하는 애플리케이션 사용시
# 미러메이커를 사용하지 않고 복제시 동일한 파티션에 동이한 데이터가 들어가도록 하는 작업은 복제하기 전 클러스터에서 사용하던 파티셔너의 대한 정보 없이는 불가능
# 복제하는 토픽의 파티션 개수가 달라진다면 복제된 데이터를 저장하는 토픽의 파티션도 개수가 달라져야 하므로 어드민까지 조합한 형태로 개발해서 복제해야함

# 복제할 클러스터 닉네임
# 클러스터 이름은 토픽이 복제될 때 복제된 토픽의 접두사로 붙게 된다
# ex) 클러스터 A (click_log) -> 클러스터 B (A_click_log) 
# 떄문에 옵션 설정 시 복제된 토픽이 어디에 위치하는지 멱확히 제시하는 클러스터 이름을 작성하는게 좋다
clusters = A, B

# 미러메이커2에서 사용할 클러스터의 접속 정보 작성
A.bootstrap.servers = a-kafka:9092
B.bootstrap.servers = b-kafka:9092

# 클러스터A에서 클러스터B로 복제를 진행할 것인지, 어떤 토픽을 복제할 것인지 명시
# A -> B 로 복제
A->B.enabled = true
# 클러스터 A [test 토픽] -> 클러스터 B [test 토픽]
A->B.topics = test

# 미러메이커2는 양방향 토픽 복제가 가능하다 
# 반대방향 복제는 하지 않으므로 false
B->A.enabled = false
B->A.topics = .*

# 복제되어 신규 생성된 토픽의 복제 개수를 설정한다
replication.factor=1

# 토픽 복제에 필요한 데이터를 저장하는 내부 토픽의 복제 개수를 설정한다
checkpoints.topic.replication.factor=1
heartbeats.topic.replication.factor=1
offset-syncs.topic.replication.factor=1

offset.storage.replication.factor=1
status.storage.replication.factor=1
config.storage.replication.factor=1